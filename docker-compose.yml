version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: url-shortener-postgres
    environment:
      POSTGRES_USER: urlshortener
      POSTGRES_PASSWORD: urlshortener123
      POSTGRES_DB: urlshortener
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U urlshortener -d urlshortener"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: url-shortener-backend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: urlshortener
      DB_USER: urlshortener
      DB_PASSWORD: urlshortener123
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
<<<<<<< HEAD
=======
      - monitoring
>>>>>>> 00bdbc0 (Advanced Visualization with Grafana)
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: url-shortener-frontend
    ports:
      - "3001:3000"
    environment:
      REACT_APP_API_URL: http://localhost:3000
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
<<<<<<< HEAD
=======
  
  # --- PROMETHEUS SERVICE ---
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - monitoring
    restart: unless-stopped
  
   # --- GRAFANA SERVICE ---
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - monitoring
    restart: unless-stopped
>>>>>>> 00bdbc0 (Advanced Visualization with Grafana)

volumes:
  postgres_data:
    driver: local
<<<<<<< HEAD

networks:
  app-network:
=======
  prometheus_data:
  grafana_data:
networks:
  app-network:
    driver: bridge
  monitoring:
>>>>>>> 00bdbc0 (Advanced Visualization with Grafana)
    driver: bridge